<script type="text/javascript">
  (function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['jquery'], factory);
  } else {
    // Browser globals
    factory(jQuery);
  }
}(function ($) {
  $.timeago = function(timestamp) {
    if (timestamp instanceof Date) {
      return intsxrds(timestamp);
    } else if (typeof timestamp === "string") {
      return intsxrds($.timeago.parse(timestamp));
    } else if (typeof timestamp === "number") {
      return intsxrds(new Date(timestamp));
    } else {
      return intsxrds($.timeago.datetime(timestamp));
    }
  };
  var $t = $.timeago;

  $.extend($.timeago, {
    settings: {
      refreshMillis: 60000,
      allowPast: true,
      allowFuture: false,
      localeTitle: false,
      cutoff: 0,
      strings: {
        prefixAgo: null,
        prefixFromNow: null,
        suffixAgo: "<?php echo $tsx['lang']['time_ago'];?>",
        suffixFromNow: "<?php echo $tsx['lang']['time_from_now'];?>",
        inPast: "<?php echo $tsx['lang']['time_any_moment_now'];?>",
        seconds: "<?php echo $tsx['lang']['now'];?>",
        minute: "<?php echo $tsx['lang']['minute'];?>",
        minutes: "<?php echo $tsx['lang']['minutes'];?>",
        hour: "<?php echo $tsx['lang']['hour'];?>",
        hours: "<?php echo $tsx['lang']['hours'];?>",
        day: "<?php echo $tsx['lang']['day'];?>",
        days: "<?php echo $tsx['lang']['days'];?>",
        week: "<?php echo $tsx['lang']['week'];?>",
        weeks: "<?php echo $tsx['lang']['weeks'];?>",
        month: "<?php echo $tsx['lang']['month'];?>",
        months: "<?php echo $tsx['lang']['months'];?>",
        year: "<?php echo $tsx['lang']['year'];?>",
        years: "<?php echo $tsx['lang']['years'];?>",
        tsxrdSeparator: " ",
        numbers: []
      }
    },

    intsxrds: function(distanceMillis,type = '') {
      if(!this.settings.allowPast && ! this.settings.allowFuture) {
          throw 'timeago allowPast and allowFuture settings can not both be set to false.';
      }

      var $l = this.settings.strings;
      var prefix = $l.prefixAgo;
      var suffix = $l.suffixAgo;
      if (this.settings.allowFuture) {
        if (distanceMillis < 0) {
          prefix = $l.prefixFromNow;
          suffix = $l.suffixFromNow;
        }
      }

      if(!this.settings.allowPast && distanceMillis >= 0) {
        return this.settings.strings.inPast;
      }

      var seconds = Math.abs(distanceMillis) / 1000;
      var minutes = seconds / 60;
      var hours = minutes / 60;
      var days = hours / 24;
      var weeks = days / 7;
      var years = days / 365;

      function substitute(stringOrFunction, number) {
        var string = $.isFunction(stringOrFunction) ? stringOrFunction(number, distanceMillis) : stringOrFunction;
        var value = ($l.numbers && $l.numbers[number]) || number;
        return number+' '+string.replace(/%d/i, value);
        //return string.replace(/%d/i, value);
      }

        // var tsxrds = seconds < 45 && substitute($l.seconds, '') ||
        // seconds < 90 && substitute('m', 1) ||
        // minutes < 45 && substitute('m', Math.round(minutes)) ||
        // minutes < 90 && substitute('h', 1) ||
        // hours < 24 && substitute('hrs', Math.round(hours)) ||
        // hours < 42 && substitute('d', 1) ||
        // days < 7 && substitute('d', Math.round(days)) ||
        // weeks < 2 && substitute('w', 1) ||
        // weeks < 52 && substitute('w', Math.round(weeks)) ||
        // years < 1.5 && substitute('y', 1) ||
        // substitute('yrs', Math.round(years));
        var tsxrds = '';
        if (type != 'notification') {
            if (seconds < 45) {
                tsxrds = substitute($l.seconds, '');
            }
            else if (seconds < 90) {
                tsxrds = substitute('<?php echo $tsx['lang']['_time_m'];?>', 1);
            }
            else if (minutes < 45) {
                tsxrds = substitute('<?php echo $tsx['lang']['_time_m'];?>', Math.round(minutes));
            }
            else if (minutes < 90) {
                tsxrds = substitute('<?php echo $tsx['lang']['_time_h'];?>', 1);
            }
            else if (hours < 24) {
                tsxrds = substitute('<?php echo $tsx['lang']['_time_hrs'];?>', Math.round(hours));
            }
            else if (hours < 42) {
                tsxrds = substitute('<?php echo $tsx['lang']['_time_d'];?>', 1);
            }
            else if (days < 7) {
                tsxrds = substitute('<?php echo $tsx['lang']['_time_d'];?>', Math.round(days));
            }
            else if (weeks < 2) {
                tsxrds = substitute('<?php echo $tsx['lang']['_time_w'];?>', 1);
            }
            else if (weeks < 52) {
                tsxrds = substitute('<?php echo $tsx['lang']['_time_w'];?>', Math.round(weeks));
            }
            else if (years < 1.5) {
                tsxrds = substitute('<?php echo $tsx['lang']['_time_y'];?>', 1);
            }
            else {
                tsxrds = substitute('<?php echo $tsx['lang']['_time_yrs'];?>', Math.round(years));
            }
        }
        else{
            if (seconds < 45) {
                tsxrds = substitute($l.seconds, '');
            }
            else if (seconds < 90) {
                tsxrds = substitute($l.minute + ' <?php echo $tsx['lang']['ago'];?>', 1);
            }
            else if (minutes < 45) {
                tsxrds = substitute($l.minutes + ' <?php echo $tsx['lang']['ago'];?>', Math.round(minutes));
            }
            else if (minutes < 90) {
                tsxrds = substitute($l.hour + ' <?php echo $tsx['lang']['ago'];?>', 1);
            }
            else if (hours < 24) {
                tsxrds = substitute($l.hours + ' <?php echo $tsx['lang']['ago'];?>', Math.round(hours));
            }
            else if (hours < 42) {
                tsxrds = substitute($l.day + ' <?php echo $tsx['lang']['ago'];?>', 1);
            }
            else if (days < 7) {
                tsxrds = substitute($l.days + ' <?php echo $tsx['lang']['ago'];?>', Math.round(days));
            }
            else if (weeks < 2) {
                tsxrds = substitute($l.week + ' <?php echo $tsx['lang']['ago'];?>', 1);
            }
            else if (weeks < 52) {
                tsxrds = substitute($l.weeks + ' <?php echo $tsx['lang']['ago'];?>', Math.round(weeks));
            }
            else if (years < 1.5) {
                tsxrds = substitute($l.year + ' <?php echo $tsx['lang']['ago'];?>', 1);
            }
            else {
                tsxrds = substitute($l.years + ' <?php echo $tsx['lang']['ago'];?>', Math.round(years));
            }
        }
            



      var separator = $l.tsxrdSeparator || "";
      if ($l.tsxrdSeparator === undefined) { separator = " "; }

      <?php if ($tsx['language'] != 'Arabic') { ?>

         return $.trim([prefix, tsxrds].join(separator));

      <?php } else { ?>

         return $.trim([prefix, suffix].join(separator));

      <?php } ?>
    },

    parse: function(iso8601) {
      var s = $.trim(iso8601);
      s = s.replace(/\.\d+/,""); // remove milliseconds
      s = s.replace(/-/,"/").replace(/-/,"/");
      s = s.replace(/T/," ").replace(/Z/," UTC");
      s = s.replace(/([\+\-]\d\d)\:?(\d\d)/," $1$2"); // -04:00 -> -0400
      s = s.replace(/([\+\-]\d\d)$/," $100"); // +09 -> +0900
      return new Date(s);
    },
    datetime: function(elem) {
      var iso8601 = $t.isTime(elem) ? $(elem).attr("datetime") : $(elem).attr("title");
      return $t.parse(iso8601);
    },
    isTime: function(elem) {
      // jQuery's `is()` doesn't play well with HTML5 in IE
      return $(elem).get(0).tagName.toLowerCase() === "time"; // $(elem).is("time");
    }
  });

  // functions that can be called via $(el).timeago('action')
  // init is default when no action is given
  // functions are called with context of a single element
  var functions = {
    init: function(){
      var refresh_el = $.proxy(refresh, this);
      refresh_el();
      var $s = $t.settings;
      if ($s.refreshMillis > 0) {
        this._timeagoInterval = setInterval(refresh_el, $s.refreshMillis);
      }
    },
    update: function(time){
      var parsedTime = $t.parse(time);
      $(this).data('timeago', { datetime: parsedTime });
      if($t.settings.localeTitle) $(this).attr("title", parsedTime.toLocaleString());
      refresh.apply(this);
    },
    updateFromDOM: function(){
      $(this).data('timeago', { datetime: $t.parse( $t.isTime(this) ? $(this).attr("datetime") : $(this).attr("title") ) });
      refresh.apply(this);
    },
    dispose: function () {
      if (this._timeagoInterval) {
        window.clearInterval(this._timeagoInterval);
        this._timeagoInterval = null;
      }
    }
  };

  $.fn.timeago = function(action, options) {
    var fn = action ? functions[action] : functions.init;
    if(!fn){
      throw new Error("Unknown function name '"+ action +"' for timeago");
    }
    // each over objects here and call the requested function
    this.each(function(){
      fn.call(this, options);
    });
    return this;
  };

  function refresh() {
    var data = prepareData(this);
    var $s = $t.settings;

    if (!isNaN(data.datetime)) {
      if ( $s.cutoff == 0 || Math.abs(distance(data.datetime)) < $s.cutoff) {
        let tType = '';
        if ($(this).hasClass('notification-time')) {
          tType = 'notification';
        }
        $(this).text(intsxrds(data.datetime,tType));
      }
    }
    return this;
  }

  function prepareData(element) {
    element = $(element);
    if (!element.data("timeago")) {
      element.data("timeago", { datetime: $t.datetime(element) });
      var text = $.trim(element.text());
      if ($t.settings.localeTitle) {
        element.attr("title", element.data('timeago').datetime.toLocaleString());
      } else if (text.length > 0 && !($t.isTime(element) && element.attr("title"))) {
        element.attr("title", text);
      }
    }
    return element.data("timeago");
  }

  function intsxrds(date,type) {
    return $t.intsxrds(distance(date),type);
  }

  function distance(date) {
    return (new Date().getTime() - date.getTime());
  }

  // fix for IE6 suckage
  document.createElement("abbr");
  document.createElement("time");
}));


$(function () {
  setInterval(function () {
    
    if ( $('.ajax-time').length > 0) {
      $('.ajax-time').timeago()
        .removeClass('.ajax-time');
    }
  },
  1000);
});
</script>